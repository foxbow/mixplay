/* -1: configuration; 0: no update; 1: normal updates */
var doUpdate=-1;
var data=null;
var mpver=~~MPCOMM_VER~~;
var isstream=0;
var msglines=["","","","","","","","","","","","","","",""];
var msgpos=0;
var active=0;
var scrolls=[];

function showInfo() {
	alert( "Running mixplayd version ~~MP_VERSION~~" );
}

/* scroll long texts */
function scrollToggle( ) {
	var to=1000;
	for (var i = 0; i < scrolls.length; i++) {
		var element=scrolls[i].element;
		if( scrolls[i].offset.charAt(0) == '-' ) {
			if( element.style.right == scrolls[i].offset ) {
				element.style.right="0px";
				to=to+4000;
			}
			else {
				element.style.right = scrolls[i].offset;
				to=to+9000;
			}
		}
	}
	setTimeout( "scrollToggle()", to )
}

/* enables scrolling on texts that are longer than the parent container */
function setScrolls( ) {
	for( var i=0; i < scrolls.length; i++ ) {
		var scroll=scrolls[i];
		var element=scroll.element;
		element.style.left="auto";
		element.style.right="auto";
		var off_right=getComputedStyle(element).right;
		var right=parseInt(off_right,10);
		scroll.offset=off_right;
		if( off_right.charAt(0) == '-' ) {
			element.style.right = off_right;
			element.offsetHeight;
			element.style.transition = 'right 3s ease-in-out';
//			element.style.textAlign='left';
//			element.style.left="auto";
		}
		else {
			element.style.left=(right/2)+"px";
//			element.style.textAlign='center';
//			element.style.right="auto";
		}
	}
}

/* sets up the scroller object */
function initScroll(index,id) {
	if( scrolls[index] == undefined ) {
		var element=document.getElementById(id);
		var scroll={"id":id,"element":element,"offset":"0px"};
		scrolls[index]=scroll;
	}
}

/* start scrollers onload - see HTML */
function initScrolls() {
	initScroll(0, 'prev');
	initScroll(1, 'title');
	initScroll(2, 'next');
}

/* stop updates and make sure that error messages do not stack */
function fail( msg ) {
	if( doUpdate != 0 ) {
		doUpdate=0;
		alert( msg );
	}
}

/* set profile to sanitized value */
function setProf() {
	var e=document.getElementById("profiles");
	var id=e.value;
	if( id != 0 ) {
		sendCMD( 0x06,id );
	}
	else {
		e.value=active;
	}
}

/* toggle visibility of extra panes */
function toggleVisibility( element ) {
	e=document.getElementById( element );
	if( e.style.display=='none') {
		if( element == 'msgs' ) { 
			document.getElementById('showmsgs').value="\u2630 Messages"
		}
		e.style.display='block';
	}
	else {
		e.style.display='none';
	}
}

/* stop the server - this should really not be here =) */
function killServer() {
	if( confirm("Do you really want to stop the Server?") ) {
		sendCMD(0x11);
		doUpdate=0;
	}
}

/* add a line of text to the message pane. Acts as ringbuffer */
function addText(text) {
	var line="";
	var numlines=15;
	e=document.getElementById('msgs');

	if( msgpos < numlines ) {
		msglines[msgpos]=text;
		msgpos++;
	}
	else {
		for( i=0; i<numlines-1; i++ ) {
			msglines[i]=msglines[i+1];
		}
		msglines[numlines-1]=text;
	}

	for( i=0; i<numlines; i++ ) {
		line+=msglines[i]+"<br>\n";
	}
	document.getElementById('msgs').innerHTML=line;

	f=document.getElementById('showmsgs');
	if( e.style.display=='none') {
		f.value="\u2630 Messages *"
	}
}

/* send a command with optional argument to the server */
function sendCMD( cmd, arg="" ) {
	var xmlhttp=new XMLHttpRequest();
	var code=Number(cmd).toString(16);
	while (code.length < 4) {
		code = "0" + code;
	}

	/* filter out commands that make no sense in stream */ 
	if( ( isstream ) && (	
		( code == '0002' ) ||
		( code == '0003' ) ||  
		( code == '0005' ) ||
		( code == '000f' ) ||  
		( code == '0010' ) ) )return;
	
	xmlhttp.onreadystatechange=function() {
		if ( xmlhttp.readyState==4  ) {
			switch( xmlhttp.status ) {
			case 0:
				fail( "CMD Error: connection lost!" );
				break;
			case 204:
				break;
			case 503:
				alert( "Sorry, we're busy!" );
				break;
			default: 
				fail( "Received Error "+xmlhttp.status+" after sending 0x"+code );
			}
		}
	}

	if( arg != "" ) {
		xmlhttp.open("GET", "/cmd/"+code+"?"+arg, true);
	}
	else {
		xmlhttp.open("GET", "/cmd/"+code, true);
	}
	xmlhttp.send();
}

/*
 * use scrollwheel to control volume
 */
function volWheel( e ) {
	if( e.deltaY < 0 ) {
		sendCMD( 0x0d );
	}
	else if( e.deltaY > 0 ) {
		sendCMD( 0x0e );
	}
}

/* change text in an element */
function setElement( e, val ) {
	document.getElementById( e ).innerHTML=val;
}

/* show/hide an element */
function setVisible( e, i ) {
	if( i == 0 ) {
		document.getElementById( e ).style.display='none';
	}
	else {
		document.getElementById( e ).style.display='block';
	}
}

/* get current status from the server and update the UI elements with the data */
function updateUI( ){
	var xmlhttp=new XMLHttpRequest();
	xmlhttp.onreadystatechange=function() {
		if (xmlhttp.readyState==4 ) {
			if( xmlhttp.status==200 ) {
				data=JSON.parse(xmlhttp.responseText);
				if( data !== undefined ) {
					if( data.version != mpver ) {
						fail( "Version clash, expected "+mpver+" and got "+data.version );
						return;
					}
					if( data.type == 3 ) {
						document.title=data.current.artist+" - "+data.current.title;
						setElement( 'title', data.current.title );
						setElement( 'prev', data.prev.artist+" - "+data.prev.title );
						setElement( 'artist', data.current.artist );
						setElement( 'album', data.current.album );
						setElement( 'genre', data.current.genre );
						setElement( 'next', data.next.artist+" - "+data.next.title );
						if( data.current.flags & 1 )  {
							document.getElementById( 'fav' ).disabled=true;
						}
						else {
							document.getElementById( 'fav' ).disabled=false;		  			
						}
						setScrolls();
					}
					isstream=data.playstream;

					setVisible( 'prev', !isstream );
					setVisible( 'ctrl', !isstream );
					setVisible( 'playstr', isstream );
					setVisible( 'playpack', !isstream );
					if( isstream ) {
						setElement( 'splaytime', data.playtime );
					}
					else {
						setElement( 'playtime', data.playtime );
						setElement( 'remtime', data.remtime );
						document.getElementById( 'progress' ).value=data.percent;
					}

					if( active != data.active ) {
						active=data.active;
						setActive( active );
					}
					if( data.status == 0 ) {
						document.getElementById('current').style.backgroundColor="#ddd";
					}
					else {
						document.getElementById('current').style.backgroundColor="#daa";
					}

					document.getElementById( 'vol' ).value=data.volume;
					if( data.msg != "" ) {
						addText(data.msg);
					}
				}
			}
			else if( xmlhttp.status == 0 ) {
				fail( "Update Error: connection lost!" );
			}
			else {
				fail( "Received Error "+xmlhttp.status+" after sending 0x"+code );
			}

			if( doUpdate != 0 ) {
				setTimeout("updateUI()",333);
			}
			else {
				document.getElementById('main').style.backgroundColor="#daa";
				document.getElementById('current').style.backgroundColor="#daa";
			}
		}
	}

	if( doUpdate == -1 ) {
		setTimeout("getConfig()",333);
		doUpdate=1;
	}

	xmlhttp.open("GET", "/status", true);
	xmlhttp.send();
}

/* shows the current profile/channel in the profile select dropdown */ 
function setActive( id ) {
	var s=document.getElementById("profiles");
	s.value=id;
}

/* gets the basic configuration of the server */
function getConfig() {
	var xmlhttp=new XMLHttpRequest();
	xmlhttp.onreadystatechange=function() {
		if (xmlhttp.readyState==4 ) {
			if( xmlhttp.status==200 ) {
				data=JSON.parse(xmlhttp.responseText);
				if( data !== undefined ) {
					if( data.version != mpver ) {
						fail( "Version clash, expected "+mpver+" and got "+data.version );
						return;
					}
					if( data.type == 2 ) {
						var s=document.getElementById("profiles");
						s.options.length=0;
						for(i=0; i<data.config.profiles; i++) {
							s.options[s.options.length] = new Option(data.config.profile[i],i+1);
						}
						s.options[s.options.length] = new Option("None",0);
						for(i=0; i<data.config.streams; i++) {
							s.options[s.options.length] = new Option(data.config.sname[i],-(i+1));
						}
						active=0;
					}
					else {
						fail( "Received reply of type "+data.type+" for config!" );
					}
				}
				else {
					fail( "Received no Data for config!" );
				}
			}
			else {
				fail( "Received Error "+xmlhttp.status+" trying to get config" );
			}
		}
	}

	xmlhttp.open("GET", "/config", true);
	xmlhttp.send();
}

function setVolume( vol ) {
	sendCMD( 0x15, vol );
}

function sendRange( cmd, term="", search=0 ) {
	var e=document.getElementById('range');
	if( search == 1 ) {
		e=document.getElementById('srange');
	}
	var range=e.options[e.selectedIndex].value;
	if( isstream ) return;
	if( ( range != 0x0100 ) && ( range != 0x0500 ) ) {
		e.selectedIndex=4;
	}
	cmd|=range;
	sendCMD( cmd, term );
}

function sendArg( cmd, search=0 ) {
	if( isstream ) return;
	var term=document.getElementById('text').value;
	if( term.length > 1 ) {
		sendRange( cmd, term, search );
	}
	else {
		alert("Need at least two letters!");
	}
}

function createLoad() {
	var term=document.getElementById('ptext').value;
	var asking="";
	if( term.length < 3 ) {
		alert("Need at least two letters!");
	}
	else {
		if( term.toLowerCase().startsWith("http") ) {
			sendCMD( 0x17, term );
		}
		else {
			if( isstream ) {
				asking="Add current stream as channel "+term+" ?"
			}
			else {
				asking="Create new profile "+term+" ?"
			}
			if( confirm( asking ) ) {
				sendCMD( 0x16, term );
				doUpdate=-1;
			}
		}
	}
}

function remProf() {
	var id=document.getElementById("profiles").value;
	if( id != 0 ) {
		if( confirm( "Remove Profile #"+id+"?" ) ) {
			sendCMD( 0x18,id );
			doUpdate=-1;
		}
	}

}

/* start the UI update thread loops */
updateUI();
scrollToggle();
