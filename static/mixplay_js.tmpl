var doUpdate=1;
var data=null;
var mpver=~~MPCOMM_VER~~;
var isstream=0;
var msglines=["","","","","","","","","","","","","","",""];
var msgpos=0;

function toggleMore(f) {
	e=document.getElementById('more');
	if( e.style.display=='none') {
		e.style.display='block';
	}
	else {
		e.style.display='none';
	}
}

function killServer() {
	if( confirm("Do you really want to stop the Server?") ) {
		sendCMD(0x11);
	}
}

function addText(text) {
	var line="";
	var numlines=15;
	if( msgpos < numlines ) {
		msglines[msgpos]=text;
		msgpos++;
	}
	else {
		for( i=0; i<numlines-1; i++ ) {
			msglines[i]=msglines[i+1];
		}
		msglines[numlines-1]=text;
	}
	
	for( i=0; i<numlines; i++ ) {
		line+=msglines[i]+"<br>\n";
	}
	document.getElementById('msgs').innerHTML=line;
}

function sendCMD( cmd, arg="" ) {
	var xmlhttp=new XMLHttpRequest();
	var code=Number(cmd).toString(16);
	while (code.length < 4) {
		code = "0" + code;
	}

	/* filter out commands that make no sense in stream */ 
	if( ( isstream ) && (	
		( code == '0002' ) ||
		( code == '0003' ) ||  
		( code == '0005' ) ||
		( code == '000f' ) ||  
		( code == '0010' ) ) )return;
	
	xmlhttp.onreadystatechange=function() {
		if ( xmlhttp.readyState==4 && xmlhttp.status!=204 ) {
			if( xmlhttp.status == 0 ) {
				if( doUpdate != 0 ) {
					doUpdate=0;
					if( confirm("CMD Error: connection lost!\nRetry?") ) {
						doUpdate=1;
						updateUI();
					}
				}
			}
			else {
				alert( "Received Error "+xmlhttp.status+" after sending 0x"+code );
			}
		}
	}

	if( arg != "" ) {
		xmlhttp.open("GET", "/cmd/"+code+"?"+arg, true);
	}
	else {
		xmlhttp.open("GET", "/cmd/"+code, true);
	}
	xmlhttp.send();
}

/*
 * use scrollwheel to control volume
 */
function volWheel( e ) {
	if( e.deltaY < 0 ) {
		sendCMD( 0x0d );
	}
	else if( e.deltaY > 0 ) {
		sendCMD( 0x0e );
	}
}

function setElement( e, val ) {
	document.getElementById( e ).innerHTML=val;
}

function setVisible( e, i ) {
	if( i == 0 ) {
		document.getElementById( e ).style.display='none';
	}
	else {
		document.getElementById( e ).style.display='block';
	}
}

function updateUI( ){
	var xmlhttp=new XMLHttpRequest();
	xmlhttp.onreadystatechange=function() {
		if (xmlhttp.readyState==4 ) {
			if( xmlhttp.status==200 ) {
				data=JSON.parse(xmlhttp.responseText);
				if( data !== undefined ) {
					if( data.version != mpver ) {
						doUpdate=0;
						alert("Version clash, expected "+mpver+" and got "+data.version );
						return;
					}					
					if( data.type == 3 ) {
						document.title=data.current.artist+" - "+data.current.title;
						setElement( 'title', data.current.title );
						setElement( 'prev', data.prev.artist+" - "+data.prev.title );
						setElement( 'artist', data.current.artist );
						setElement( 'album', data.current.album );
						setElement( 'genre', data.current.genre );
						setElement( 'next', data.next.artist+" - "+data.next.title );
						if( data.current.flags & 1 )  {
							document.getElementById( 'fav' ).disabled=true;
						}
						else {
							document.getElementById( 'fav' ).disabled=false;		  			
						}
						isstream=data.playstream;
						setVisible( 'prev', !isstream );
						setVisible( 'ctrl', !isstream );
						setVisible( 'playstr', isstream );
						setVisible( 'playpack', !isstream );
					}
					if( data.status == 0 ) {
						document.getElementById('current').style.backgroundColor="#ddd";
					}
					else {
						document.getElementById('current').style.backgroundColor="#daa";
					}

					if( isstream ) {
						setElement( 'splaytime', data.playtime );
					}
					else {
						setElement( 'playtime', data.playtime );
						setElement( 'remtime', data.remtime );
						document.getElementById( 'progress' ).value=data.percent;
					}
					document.getElementById( 'vol' ).value=data.volume;
					if( data.msg != "" ) {
						addText(data.msg);
					}
				}
			}
			else if( xmlhttp.status==503 ) {
				if( confirm( "Try to restart?" ) ) {
					sendCMD( 0x04 );
				}
				else{
					alert( "Stopping updates.." );
					doUpdate=0;
				}
			}
			else if( xmlhttp.status == 0 ) {
				if( doUpdate != 0 ) {
					doUpdate=0;
					if( confirm("Update Error: connection lost!\nRetry?") ) {
						doUpdate=1;
						updateUI();
					}
				}
			}
			else {
				alert( "Received Error "+xmlhttp.status+" after sending 0x"+code );
			}
		}
	}

	if( doUpdate != 0 ) {
		xmlhttp.open("GET", "/status", true);
		xmlhttp.send();
		setTimeout("updateUI()",333);
	}
}

function setVolume( vol ) {
	sendCMD( 0x15, vol );
}

function dnpfav( cmd, term="" ) {
	if( isstream ) return;
	var e=document.getElementById('range');
	cmd|=e.options[e.selectedIndex].value;
	if(document.getElementById('fuzzy').checked ) {
		cmd|=0x1000;
	}
	sendCMD( cmd, term );
}

function sendArg( cmd ) {
	if( isstream ) return;
	var term=document.getElementById('text').value;
	if( term.length > 1 ) {
		dnpfav( cmd, term );
	}
	else {
		alert("Need at least two letters!");
	}
}

updateUI();
